{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenCAPI-SNAP Overview What is OpenCAPI OpenCAPI (Open Coherent Accelerator Processor Interface) is an open coherent high performance bus interface based on a new bus standard. Driven by the emerging accelerated heterogenerous computing and advanced memory/storage solutions, It provides an Open Interface Architecture that allows any microprocessor to attach to Coherent user-level accelerators and I/O devices Advanced memories accessible via read/write or user-level DMA semantics Its specifications and ecosystem are managed by an open forum OpenCAPI Consortium . What is SNAP The SNAP Framework enables programmers and computer engineers to quickly create FPGA-based acceleration actions that work on server host data, as well as data from storage, flash, Ethernet, or other connected resources. SNAP, therefore, is an acronym for \u201c S torage, N etwork, and A nalytics P rogramming\u201d. The OC-SNAP framework makes it easy to create accelerated actions utilizing OpenCAPI. What can I do with it SNAP helps you create an accelerator on a certain FPGA card. Refer to \"User Guide\" tab for a more detailed step-to-step guide. Preparation Find out the \"hot-spot\" function to be moved to FPGA. This function, usually computation intensive, is also named as \"action\" in the following description. Step1: Work on software part Put the action code into a function in the main software code, and determine the function parameters required. Add the few libosnap API functions that required to set up CAPI to the main software. Step2: Work on hardware part Write the \"hardware action\" in a supported programming language, such as Vivado HLS or Verilog/VHDL. Together with the software part done in above step, run a co-simulation to verify the correctness. After the co-simulation is done, generate the FPGA bitstream. Step3: Deploy to Power9! Program the bitstream to a real FPGA card plugged into a supported Power9 machine. Copy, compile and execute the source code of software part, and see the acceleration! SNAP Framework The framework hardware consists of a AXI-to-CAPI bridge unit, memory-mapped register I/O, host DMA, and a job management unit. It interfaces with a user-written action (a.k.a. kernel) through an AXI-lite control interface, and gives coherent access to host memory through AXI. Optionally, it also provides access to the on-card DRAM via AXI. A NVMe host controller-AXI bridge complements the framework for storage or database applications as an independent unit. Software gets access to the action through the libsnap library, allowing applications to call a \"function\" instead of programming an accelerator. The framework supports multi-process applications and can be extended to support multiple instantiated hardware actions in parallel. For more information, please refer to \"Deep Dive\" tab. Dependencies Machine and Tools for Development Development is usually done on a Linux (x86) computer . See examples of supported development configurations . The required tools and packages are listed below. Web access to github is recommended to follow the build instructions. A real FPGA card is not required for the plain hardware development. (a) Xilinx Vivado SNAP currently supports Xilinx FPGA devices, exclusively. For synthesis, simulation model and image build, the Xilinx Vivado 2018.2 tool suite is recommended. https://www.xilinx.com/products/design-tools/hardware-zone.html (b) OpenCAPI TlxDLx package (c) Build process Building the code and running the make environment requires the usual development tools gcc, make, sed, awk . If not installed already, the installer package build-essential will set up the most important tools. Configuring the SNAP framework will call a standalone tool that is based on the Linux kernel kconfig tool. The ncurses library must be installed to use the menu-driven user interface for kconfig . (d) Run Simulation For simulation, SNAP relies on the xterm program. You can use the build-in simulation xsim from Xilinx Vivado, or you can also use other simulations. Check Co-simulation for more information. Server and FPGA cards for Deployment (a) Supported Power9 servers Lagrange Chip based Monza Chip based (b) FPGA Card selection As of now, the following FPGA cards can be used with OC-SNAP: Alphadata 9V3 Compliant with CAPI1.0/2.0 Currently the SNAP Framework supports CAPI1.0 on POWER8 based hosts and CAPI2.0 on POWER9 based hosts. A similar OpenCAPI SNAP framework is going to be added in a new repository. Users working on SNAP today can easily transfer their CAPI1.0 work to CAPI2.0 or OpenCAPI as the interface for \" Software Program \" and \" Hardware Action \" (shown in the yellow areas of the above figure) will stay the same. Contributing to this Repository This is an open-source project. We greatly appreciate your contributions and collaboration. Before contributing to this project, please read and agree to the rules in * CONTRIBUTING.md To simplify the sign-off, you may want to create a \".gitconfig\" file in you home by executing: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Then, for every commit, use git commit -s to add the \"Signed-off by ...\" message. By default the git repository is read-only. Users can fork the snap repository, make the changes there and issue a pull request. Even members with write access to this repository can't commit directly into the protected master branch. To contribute changes, please create a branch, make the changes there and issue a pull request. Pull requests to merge into the master branch must be reviewed before they will be merged. Read more This project is an initiative of the OpenPOWER Foundation Accelerator Workgroup. Please see here for more details: OpenPower Foundation Acceleration Group CAPI drives business performance CAPI and SNAP on IBM developerworks Education Videos","title":"Home"},{"location":"#opencapi-snap-overview","text":"","title":"OpenCAPI-SNAP Overview"},{"location":"#what-is-opencapi","text":"OpenCAPI (Open Coherent Accelerator Processor Interface) is an open coherent high performance bus interface based on a new bus standard. Driven by the emerging accelerated heterogenerous computing and advanced memory/storage solutions, It provides an Open Interface Architecture that allows any microprocessor to attach to Coherent user-level accelerators and I/O devices Advanced memories accessible via read/write or user-level DMA semantics Its specifications and ecosystem are managed by an open forum OpenCAPI Consortium .","title":"What is OpenCAPI"},{"location":"#what-is-snap","text":"The SNAP Framework enables programmers and computer engineers to quickly create FPGA-based acceleration actions that work on server host data, as well as data from storage, flash, Ethernet, or other connected resources. SNAP, therefore, is an acronym for \u201c S torage, N etwork, and A nalytics P rogramming\u201d. The OC-SNAP framework makes it easy to create accelerated actions utilizing OpenCAPI.","title":"What is SNAP"},{"location":"#what-can-i-do-with-it","text":"SNAP helps you create an accelerator on a certain FPGA card. Refer to \"User Guide\" tab for a more detailed step-to-step guide.","title":"What can I do with it"},{"location":"#preparation","text":"Find out the \"hot-spot\" function to be moved to FPGA. This function, usually computation intensive, is also named as \"action\" in the following description.","title":"Preparation"},{"location":"#step1-work-on-software-part","text":"Put the action code into a function in the main software code, and determine the function parameters required. Add the few libosnap API functions that required to set up CAPI to the main software.","title":"Step1: Work on software part"},{"location":"#step2-work-on-hardware-part","text":"Write the \"hardware action\" in a supported programming language, such as Vivado HLS or Verilog/VHDL. Together with the software part done in above step, run a co-simulation to verify the correctness. After the co-simulation is done, generate the FPGA bitstream.","title":"Step2: Work on hardware part"},{"location":"#step3-deploy-to-power9","text":"Program the bitstream to a real FPGA card plugged into a supported Power9 machine. Copy, compile and execute the source code of software part, and see the acceleration!","title":"Step3: Deploy to Power9!"},{"location":"#snap-framework","text":"The framework hardware consists of a AXI-to-CAPI bridge unit, memory-mapped register I/O, host DMA, and a job management unit. It interfaces with a user-written action (a.k.a. kernel) through an AXI-lite control interface, and gives coherent access to host memory through AXI. Optionally, it also provides access to the on-card DRAM via AXI. A NVMe host controller-AXI bridge complements the framework for storage or database applications as an independent unit. Software gets access to the action through the libsnap library, allowing applications to call a \"function\" instead of programming an accelerator. The framework supports multi-process applications and can be extended to support multiple instantiated hardware actions in parallel. For more information, please refer to \"Deep Dive\" tab.","title":"SNAP Framework"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#machine-and-tools-for-development","text":"Development is usually done on a Linux (x86) computer . See examples of supported development configurations . The required tools and packages are listed below. Web access to github is recommended to follow the build instructions. A real FPGA card is not required for the plain hardware development.","title":"Machine and Tools for Development"},{"location":"#a-xilinx-vivado","text":"SNAP currently supports Xilinx FPGA devices, exclusively. For synthesis, simulation model and image build, the Xilinx Vivado 2018.2 tool suite is recommended. https://www.xilinx.com/products/design-tools/hardware-zone.html","title":"(a) Xilinx Vivado"},{"location":"#b-opencapi-tlxdlx-package","text":"","title":"(b) OpenCAPI TlxDLx package"},{"location":"#c-build-process","text":"Building the code and running the make environment requires the usual development tools gcc, make, sed, awk . If not installed already, the installer package build-essential will set up the most important tools. Configuring the SNAP framework will call a standalone tool that is based on the Linux kernel kconfig tool. The ncurses library must be installed to use the menu-driven user interface for kconfig .","title":"(c) Build process"},{"location":"#d-run-simulation","text":"For simulation, SNAP relies on the xterm program. You can use the build-in simulation xsim from Xilinx Vivado, or you can also use other simulations. Check Co-simulation for more information.","title":"(d) Run Simulation"},{"location":"#server-and-fpga-cards-for-deployment","text":"","title":"Server and FPGA cards for Deployment"},{"location":"#a-supported-power9-servers","text":"Lagrange Chip based Monza Chip based","title":"(a) Supported Power9 servers"},{"location":"#b-fpga-card-selection","text":"As of now, the following FPGA cards can be used with OC-SNAP: Alphadata 9V3","title":"(b) FPGA Card selection"},{"location":"#compliant-with-capi1020","text":"Currently the SNAP Framework supports CAPI1.0 on POWER8 based hosts and CAPI2.0 on POWER9 based hosts. A similar OpenCAPI SNAP framework is going to be added in a new repository. Users working on SNAP today can easily transfer their CAPI1.0 work to CAPI2.0 or OpenCAPI as the interface for \" Software Program \" and \" Hardware Action \" (shown in the yellow areas of the above figure) will stay the same.","title":"Compliant with CAPI1.0/2.0"},{"location":"#contributing-to-this-repository","text":"This is an open-source project. We greatly appreciate your contributions and collaboration. Before contributing to this project, please read and agree to the rules in * CONTRIBUTING.md To simplify the sign-off, you may want to create a \".gitconfig\" file in you home by executing: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Then, for every commit, use git commit -s to add the \"Signed-off by ...\" message. By default the git repository is read-only. Users can fork the snap repository, make the changes there and issue a pull request. Even members with write access to this repository can't commit directly into the protected master branch. To contribute changes, please create a branch, make the changes there and issue a pull request. Pull requests to merge into the master branch must be reviewed before they will be merged.","title":"Contributing to this Repository"},{"location":"#read-more","text":"This project is an initiative of the OpenPOWER Foundation Accelerator Workgroup. Please see here for more details: OpenPower Foundation Acceleration Group CAPI drives business performance CAPI and SNAP on IBM developerworks Education Videos","title":"Read more"},{"location":"actions-doc/hdl-example/","text":"Get started This is my start. I want it.","title":"hdl_example"},{"location":"actions-doc/hdl-example/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"actions-doc/hdl-helloworld/","text":"Get started This is my start. I want it.","title":"hdl_helloworld"},{"location":"actions-doc/hdl-helloworld/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"actions-doc/hls-helloworld/","text":"Get started This is my start. I want it.","title":"hls_helloworld"},{"location":"actions-doc/hls-helloworld/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"actions-doc/hls-memcopy/","text":"Get started This is my start. I want it.","title":"hls_memcopy"},{"location":"actions-doc/hls-memcopy/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/board-package/","text":"Get started This is my start. I want it.","title":"New Board Support"},{"location":"deep-dive/board-package/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/libosnap/","text":"Get started This is my start. I want it.","title":"SNAP Software API"},{"location":"deep-dive/libosnap/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/registers/","text":"Get started This is my start. I want it.","title":"SNAP Registers"},{"location":"deep-dive/registers/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/snap_core/","text":"SNAP Hardware: logic design","title":"SNAP Logic Design"},{"location":"deep-dive/snap_core/#snap-hardware-logic-design","text":"","title":"SNAP Hardware: logic design"},{"location":"misc/doc-guide/","text":"How to generate this document website This document website is created by MkDocs. Installation Install phython and pip https://realpython.com/installing-python/ Install MkDocs","title":"Document Guide"},{"location":"misc/doc-guide/#how-to-generate-this-document-website","text":"This document website is created by MkDocs.","title":"How to generate this document website"},{"location":"misc/doc-guide/#installation","text":"","title":"Installation"},{"location":"misc/doc-guide/#install-phython-and-pip","text":"https://realpython.com/installing-python/","title":"Install phython and pip"},{"location":"misc/doc-guide/#install-mkdocs","text":"","title":"Install MkDocs"},{"location":"user-guide/co-simulation/","text":"Get started This is my start. I want it.","title":"Co-Simulation"},{"location":"user-guide/co-simulation/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/command-reference/","text":"Get started This is my start. I want it.","title":"Command Reference"},{"location":"user-guide/command-reference/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/debug-issue/","text":"Get started This is my start.","title":"Debug an issue"},{"location":"user-guide/debug-issue/#get-started","text":"This is my start.","title":"Get started"},{"location":"user-guide/deploy/","text":"Get started This is my start. I want it.","title":"Deploy on Power Server"},{"location":"user-guide/deploy/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/make-image/","text":"Get started This is my start. I want it.","title":"FPGA Image build"},{"location":"user-guide/make-image/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/new-action/","text":"Get started This is my start. I want it.","title":"Create a new action"},{"location":"user-guide/new-action/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/optimize-hls/","text":"Get started This is my start. I want it.","title":"Optimize HLS action"},{"location":"user-guide/optimize-hls/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/prepare-env/","text":"Get started This is my start. I want it.","title":"Prepare Environment"},{"location":"user-guide/prepare-env/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/run-example/","text":"Get started This is my start. I want it.","title":"Run an example"},{"location":"user-guide/run-example/#get-started","text":"This is my start. I want it.","title":"Get started"}]}