{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenCAPI-SNAP Overview What is OpenCAPI OpenCAPI (Open Coherent Accelerator Processor Interface) is an open coherent high performance bus interface based on a new bus standard. Driven by the emerging accelerated heterogenerous computing and advanced memory/storage solutions, It provides an Open Interface Architecture that allows any microprocessor to attach to Coherent user-level accelerators and I/O devices Advanced memories accessible via read/write or user-level DMA semantics Its specifications and ecosystem are managed by an open forum OpenCAPI Consortium . What is SNAP The SNAP Framework enables programmers and computer engineers to quickly create FPGA-based acceleration actions that work on server host data, as well as data from storage, flash, Ethernet, or other connected resources. SNAP, therefore, is an acronym for \u201c S torage, N etwork, and A nalytics P rogramming\u201d. The OC-SNAP framework makes it easy to create accelerated actions utilizing OpenCAPI. What can I do with it SNAP helps you create an accelerator on a certain FPGA card. Refer to \"User Guide\" tab for a more detailed step-to-step guide. Preparation Find out the \"hot-spot\" function to be moved to FPGA. This function, usually computation intensive, is also named as \"action\" in the following description. Step1: Work on software part Put the action code into a function in the main software code, and determine the function parameters required. Add the few libosnap API functions that required to set up CAPI to the main software. Step2: Work on hardware part Write the \"hardware action\" in a supported programming language, such as Vivado HLS or Verilog/VHDL. Together with the software part done in above step, run a co-simulation to verify the correctness. After the co-simulation is done, generate the FPGA bitstream. Step3: Deploy to Power9! Program the bitstream to a real FPGA card plugged into a supported Power9 machine. Copy, compile and execute the source code of software part, and see the acceleration! SNAP Framework The framework hardware consists of a AXI-to-CAPI bridge unit, memory-mapped register I/O, host DMA, and a job management unit. It interfaces with a user-written action (a.k.a. kernel) through an AXI-lite control interface, and gives coherent access to host memory through AXI. Optionally, it also provides access to the on-card DRAM via AXI. A NVMe host controller-AXI bridge complements the framework for storage or database applications as an independent unit. Software gets access to the action through the libsnap library, allowing applications to call a \"function\" instead of programming an accelerator. The framework supports multi-process applications and can be extended to support multiple instantiated hardware actions in parallel. For more information, please refer to \"Deep Dive\" tab. Dependencies Machine and Tools for Development Development is usually done on a Linux (x86) computer . See examples of supported development configurations . The required tools and packages are listed below. Web access to github is recommended to follow the build instructions. A real FPGA card is not required for the plain hardware development. (a) Xilinx Vivado SNAP currently supports Xilinx FPGA devices, exclusively. For synthesis, simulation model and image build, the Xilinx Vivado 2018.2 tool suite is recommended. https://www.xilinx.com/products/design-tools/hardware-zone.html (b) OpenCAPI TlxDLx package (c) Build process Building the code and running the make environment requires the usual development tools gcc, make, sed, awk . If not installed already, the installer package build-essential will set up the most important tools. Configuring the SNAP framework will call a standalone tool that is based on the Linux kernel kconfig tool. The ncurses library must be installed to use the menu-driven user interface for kconfig . (d) Run Simulation For simulation, SNAP relies on the xterm program. You can use the build-in simulation xsim from Xilinx Vivado, or you can also use other simulations. Check Co-simulation for more information. Server and FPGA cards for Deployment (a) Supported Power9 servers Lagrange Chip based Monza Chip based (b) FPGA Card selection As of now, the following FPGA cards can be used with OC-SNAP: Alphadata 9V3 Compliance with CAPI1.0/2.0 Currently the SNAP Framework supports CAPI1.0 on POWER8 based hosts and CAPI2.0 on POWER9 based hosts. A similar OpenCAPI SNAP framework is going to be added in a new repository. Users working on SNAP today can easily transfer their CAPI1.0 work to CAPI2.0 or OpenCAPI as the interface for \" Software Program \" and \" Hardware Action \" (shown in the yellow areas of the above figure) will stay the same. Read more This project is an initiative of the OpenPOWER Foundation Accelerator Workgroup. Please see here for more details: OpenPower Foundation Acceleration Group CAPI drives business performance CAPI and SNAP on IBM developerworks Education Videos","title":"About"},{"location":"#opencapi-snap-overview","text":"","title":"OpenCAPI-SNAP Overview"},{"location":"#what-is-opencapi","text":"OpenCAPI (Open Coherent Accelerator Processor Interface) is an open coherent high performance bus interface based on a new bus standard. Driven by the emerging accelerated heterogenerous computing and advanced memory/storage solutions, It provides an Open Interface Architecture that allows any microprocessor to attach to Coherent user-level accelerators and I/O devices Advanced memories accessible via read/write or user-level DMA semantics Its specifications and ecosystem are managed by an open forum OpenCAPI Consortium .","title":"What is OpenCAPI"},{"location":"#what-is-snap","text":"The SNAP Framework enables programmers and computer engineers to quickly create FPGA-based acceleration actions that work on server host data, as well as data from storage, flash, Ethernet, or other connected resources. SNAP, therefore, is an acronym for \u201c S torage, N etwork, and A nalytics P rogramming\u201d. The OC-SNAP framework makes it easy to create accelerated actions utilizing OpenCAPI.","title":"What is SNAP"},{"location":"#what-can-i-do-with-it","text":"SNAP helps you create an accelerator on a certain FPGA card. Refer to \"User Guide\" tab for a more detailed step-to-step guide.","title":"What can I do with it"},{"location":"#preparation","text":"Find out the \"hot-spot\" function to be moved to FPGA. This function, usually computation intensive, is also named as \"action\" in the following description.","title":"Preparation"},{"location":"#step1-work-on-software-part","text":"Put the action code into a function in the main software code, and determine the function parameters required. Add the few libosnap API functions that required to set up CAPI to the main software.","title":"Step1: Work on software part"},{"location":"#step2-work-on-hardware-part","text":"Write the \"hardware action\" in a supported programming language, such as Vivado HLS or Verilog/VHDL. Together with the software part done in above step, run a co-simulation to verify the correctness. After the co-simulation is done, generate the FPGA bitstream.","title":"Step2: Work on hardware part"},{"location":"#step3-deploy-to-power9","text":"Program the bitstream to a real FPGA card plugged into a supported Power9 machine. Copy, compile and execute the source code of software part, and see the acceleration!","title":"Step3: Deploy to Power9!"},{"location":"#snap-framework","text":"The framework hardware consists of a AXI-to-CAPI bridge unit, memory-mapped register I/O, host DMA, and a job management unit. It interfaces with a user-written action (a.k.a. kernel) through an AXI-lite control interface, and gives coherent access to host memory through AXI. Optionally, it also provides access to the on-card DRAM via AXI. A NVMe host controller-AXI bridge complements the framework for storage or database applications as an independent unit. Software gets access to the action through the libsnap library, allowing applications to call a \"function\" instead of programming an accelerator. The framework supports multi-process applications and can be extended to support multiple instantiated hardware actions in parallel. For more information, please refer to \"Deep Dive\" tab.","title":"SNAP Framework"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#machine-and-tools-for-development","text":"Development is usually done on a Linux (x86) computer . See examples of supported development configurations . The required tools and packages are listed below. Web access to github is recommended to follow the build instructions. A real FPGA card is not required for the plain hardware development.","title":"Machine and Tools for Development"},{"location":"#a-xilinx-vivado","text":"SNAP currently supports Xilinx FPGA devices, exclusively. For synthesis, simulation model and image build, the Xilinx Vivado 2018.2 tool suite is recommended. https://www.xilinx.com/products/design-tools/hardware-zone.html","title":"(a) Xilinx Vivado"},{"location":"#b-opencapi-tlxdlx-package","text":"","title":"(b) OpenCAPI TlxDLx package"},{"location":"#c-build-process","text":"Building the code and running the make environment requires the usual development tools gcc, make, sed, awk . If not installed already, the installer package build-essential will set up the most important tools. Configuring the SNAP framework will call a standalone tool that is based on the Linux kernel kconfig tool. The ncurses library must be installed to use the menu-driven user interface for kconfig .","title":"(c) Build process"},{"location":"#d-run-simulation","text":"For simulation, SNAP relies on the xterm program. You can use the build-in simulation xsim from Xilinx Vivado, or you can also use other simulations. Check Co-simulation for more information.","title":"(d) Run Simulation"},{"location":"#server-and-fpga-cards-for-deployment","text":"","title":"Server and FPGA cards for Deployment"},{"location":"#a-supported-power9-servers","text":"Lagrange Chip based Monza Chip based","title":"(a) Supported Power9 servers"},{"location":"#b-fpga-card-selection","text":"As of now, the following FPGA cards can be used with OC-SNAP: Alphadata 9V3","title":"(b) FPGA Card selection"},{"location":"#compliance-with-capi1020","text":"Currently the SNAP Framework supports CAPI1.0 on POWER8 based hosts and CAPI2.0 on POWER9 based hosts. A similar OpenCAPI SNAP framework is going to be added in a new repository. Users working on SNAP today can easily transfer their CAPI1.0 work to CAPI2.0 or OpenCAPI as the interface for \" Software Program \" and \" Hardware Action \" (shown in the yellow areas of the above figure) will stay the same.","title":"Compliance with CAPI1.0/2.0"},{"location":"#read-more","text":"This project is an initiative of the OpenPOWER Foundation Accelerator Workgroup. Please see here for more details: OpenPower Foundation Acceleration Group CAPI drives business performance CAPI and SNAP on IBM developerworks Education Videos","title":"Read more"},{"location":"actions-doc/hdl-example/","text":"Get started This is my start. I want it.","title":"hdl_example"},{"location":"actions-doc/hdl-example/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"actions-doc/hdl-helloworld/","text":"Get started This is my start. I want it.","title":"hdl_helloworld"},{"location":"actions-doc/hdl-helloworld/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"actions-doc/hls-helloworld/","text":"Get started This is my start. I want it.","title":"hls_helloworld"},{"location":"actions-doc/hls-helloworld/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"actions-doc/hls-memcopy/","text":"Get started This is my start. I want it.","title":"hls_memcopy"},{"location":"actions-doc/hls-memcopy/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/board-package/","text":"Get started This is my start. I want it.","title":"New Board Support"},{"location":"deep-dive/board-package/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/libosnap/","text":"Get started This is my start. I want it.","title":"SNAP Software API"},{"location":"deep-dive/libosnap/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/registers/","text":"Get started This is my start. I want it.","title":"SNAP Registers"},{"location":"deep-dive/registers/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"deep-dive/snap_core/","text":"SNAP Hardware: logic design","title":"SNAP Logic Design"},{"location":"deep-dive/snap_core/#snap-hardware-logic-design","text":"","title":"SNAP Hardware: logic design"},{"location":"misc/doc-guide/","text":"How to generate this website This static documentation website is created by MkDocs and has picked a theme from bootswatch . It uses \"github pages\" and this site is hosted by Github. The documentation source files are written in Markdown format. With MkDocs tool, the generated site files (html files) are automatically pushed into a specific branch gh-pages of the git repository. Installation 1. Install python and pip python and pip 2. Install mkdocs-bootswatch pip install mkdocs-bootswatch Please refer to bootswatch for more information. 3. Install a markdown editor You can simply edit the markdown (.md) files by any text editor, but it's better to user a professional markdown editor. For example, typora . It supports all of the platforms (Windows/MacOS/Linux). With a Markdown editor, you can insert pictures more easily and can watch the markdown effects when you write. Note Please configure typora to strict Markdown mode. That ensures you get the same output effects on both typora and mkdocs . 4. Install Inkscape This step is optional. Inkscape is a free drawing tool and can help you draw and convert vector graphics. They have smaller file sizes and can be scaled without image quality loss.. Website Structure First, you need to git clone the oc-snap repository and go to web-doc directory. git clone git@github.ibm.com:OC-Enablement/oc-snap.git cd oc-snap/web-doc The docs folder is where to put the markdown files, and the mkdocs.yml lists the website structure and global definitons. For example, this site has a structure like: nav: - Home: 'index.md' - User Guide: - 'Prepare Environment': 'user-guide/prepare-env.md' - 'Run an example': 'user-guide/run-example.md' - 'Create a new action': 'user-guide/new-action.md' - 'Co-Simulation': 'user-guide/co-simulation.md' - 'FPGA Image build': 'user-guide/make-image.md' - 'Optimize HLS action': 'user-guide/optimize-hls.md' - 'Deploy on Power Server': 'user-guide/deploy.md' - 'Debug an issue': 'user-guide/debug-issue.md' - 'Command Reference': 'user-guide/command-reference.md' - Examples: - 'hdl_example': 'actions-doc/hdl-example.md' - 'hdl_helloworld': 'actions-doc/hdl-helloworld.md' - 'hls_helloworld': 'actions-doc/hls-helloworld.md' - 'hls_memcopy': 'actions-doc/hls-memcopy.md' - Deep Dive: - 'SNAP Software API': 'deep-dive/libosnap.md' - 'SNAP Registers': 'deep-dive/registers.md' - 'SNAP Logic Design': 'deep-dive/snap_core.md' - 'New Board Support': 'deep-dive/board-package.md' - Misc: - 'Document Guide': 'misc/doc-guide.md' You can edit them as needed. Write Markdown pages On your local desktop, edit markdown files under web-doc/docs folder. If you want to add/delete/rename the files, you also need to edit mkdocs.yml Now it's time to work with an editor (i.e, typora) to write the documents. You also may need to learn some markdown syntax. Don't worry, that's easy. In your teminal (MacOS or Linux), or cmd (Windows), start a serve process: mkdocs serve Then open a web browser, input http://127.0.0.1:8000 . So whenever you save any markdown files, you can check the generated website immediately.. Play with pictures The first rule Reduce the usage of pictures. Avoid unnecessary screenshots. It's quite easy You can insert jpg, png, svg files. You can also just Ctrl-C and Ctrl-V pictures. Typora will automatically copy the files into a directory <filename>.assets , and here <filename> is the name of markdown file. The inserted or copied pictures will be saved in this directory and relative links pointed to them will be created. The generated html webpage will use those relative links to show the pictures. Note Please enable \"Automatically copy images into folder\" in Preferences of typora. Use diagrams from PPT For the diagrams from Microsoft PowerPoint, here is a good way to have the smallest file size and best quality: In PowerPoint, select the region of diagram, right-click mouse -> \"Save as Picture ...\" and save it as \"PDF\" format. Open the PDF file with Inkscape . (Right-click the file -> \"Open with ...\", choose Inkscape in the poped up list). Unclick \"Embed images\" and then \"OK\". In Inkscape, save it as SVG file. You can select the region of a diagram in PPT, Ctrl-C and Ctrl-V in Typora directly. Thus it will save a PNG file. In my experiment, this PNG is of 188KB. And with the above flow to save it as SVG file, its size is 62KB. And SVG can be zoomed in with very clear shape and font. Warning Please use normal fonts in PPT, for example \"Arial\". Otherwise you may get a SVG file with a replaced font and that may look different. Deploy to Github Pages When most of the edition work is done, and it's time to commit your documents to oc-snap github. First you should commit and push your changes in web-doc , which is the folder of source files, to git repository. Commit web-doc source files in a branch other than master, ask someone to review them, merge them into master branch after getting approvements. Then you can simply publish website with just one step: cd <PATH>/oc-snap/web-doc mkdocs gh-deploy The entire website will be pushed to gh-pages branch of oc-snap repository. See them at https://pages.github.ibm.com/oc-enablement/oc-snap !","title":"Document Guide"},{"location":"misc/doc-guide/#how-to-generate-this-website","text":"This static documentation website is created by MkDocs and has picked a theme from bootswatch . It uses \"github pages\" and this site is hosted by Github. The documentation source files are written in Markdown format. With MkDocs tool, the generated site files (html files) are automatically pushed into a specific branch gh-pages of the git repository.","title":"How to generate this website"},{"location":"misc/doc-guide/#installation","text":"","title":"Installation"},{"location":"misc/doc-guide/#1-install-python-and-pip","text":"python and pip","title":"1. Install python and pip"},{"location":"misc/doc-guide/#2-install-mkdocs-bootswatch","text":"pip install mkdocs-bootswatch Please refer to bootswatch for more information.","title":"2. Install mkdocs-bootswatch"},{"location":"misc/doc-guide/#3-install-a-markdown-editor","text":"You can simply edit the markdown (.md) files by any text editor, but it's better to user a professional markdown editor. For example, typora . It supports all of the platforms (Windows/MacOS/Linux). With a Markdown editor, you can insert pictures more easily and can watch the markdown effects when you write. Note Please configure typora to strict Markdown mode. That ensures you get the same output effects on both typora and mkdocs .","title":"3. Install a markdown editor"},{"location":"misc/doc-guide/#4-install-inkscape","text":"This step is optional. Inkscape is a free drawing tool and can help you draw and convert vector graphics. They have smaller file sizes and can be scaled without image quality loss..","title":"4. Install Inkscape"},{"location":"misc/doc-guide/#website-structure","text":"First, you need to git clone the oc-snap repository and go to web-doc directory. git clone git@github.ibm.com:OC-Enablement/oc-snap.git cd oc-snap/web-doc The docs folder is where to put the markdown files, and the mkdocs.yml lists the website structure and global definitons. For example, this site has a structure like: nav: - Home: 'index.md' - User Guide: - 'Prepare Environment': 'user-guide/prepare-env.md' - 'Run an example': 'user-guide/run-example.md' - 'Create a new action': 'user-guide/new-action.md' - 'Co-Simulation': 'user-guide/co-simulation.md' - 'FPGA Image build': 'user-guide/make-image.md' - 'Optimize HLS action': 'user-guide/optimize-hls.md' - 'Deploy on Power Server': 'user-guide/deploy.md' - 'Debug an issue': 'user-guide/debug-issue.md' - 'Command Reference': 'user-guide/command-reference.md' - Examples: - 'hdl_example': 'actions-doc/hdl-example.md' - 'hdl_helloworld': 'actions-doc/hdl-helloworld.md' - 'hls_helloworld': 'actions-doc/hls-helloworld.md' - 'hls_memcopy': 'actions-doc/hls-memcopy.md' - Deep Dive: - 'SNAP Software API': 'deep-dive/libosnap.md' - 'SNAP Registers': 'deep-dive/registers.md' - 'SNAP Logic Design': 'deep-dive/snap_core.md' - 'New Board Support': 'deep-dive/board-package.md' - Misc: - 'Document Guide': 'misc/doc-guide.md' You can edit them as needed.","title":"Website Structure"},{"location":"misc/doc-guide/#write-markdown-pages","text":"On your local desktop, edit markdown files under web-doc/docs folder. If you want to add/delete/rename the files, you also need to edit mkdocs.yml Now it's time to work with an editor (i.e, typora) to write the documents. You also may need to learn some markdown syntax. Don't worry, that's easy. In your teminal (MacOS or Linux), or cmd (Windows), start a serve process: mkdocs serve Then open a web browser, input http://127.0.0.1:8000 . So whenever you save any markdown files, you can check the generated website immediately..","title":"Write Markdown pages"},{"location":"misc/doc-guide/#play-with-pictures","text":"","title":"Play with pictures"},{"location":"misc/doc-guide/#the-first-rule","text":"Reduce the usage of pictures. Avoid unnecessary screenshots.","title":"The first rule"},{"location":"misc/doc-guide/#its-quite-easy","text":"You can insert jpg, png, svg files. You can also just Ctrl-C and Ctrl-V pictures. Typora will automatically copy the files into a directory <filename>.assets , and here <filename> is the name of markdown file. The inserted or copied pictures will be saved in this directory and relative links pointed to them will be created. The generated html webpage will use those relative links to show the pictures. Note Please enable \"Automatically copy images into folder\" in Preferences of typora.","title":"It's quite easy"},{"location":"misc/doc-guide/#use-diagrams-from-ppt","text":"For the diagrams from Microsoft PowerPoint, here is a good way to have the smallest file size and best quality: In PowerPoint, select the region of diagram, right-click mouse -> \"Save as Picture ...\" and save it as \"PDF\" format. Open the PDF file with Inkscape . (Right-click the file -> \"Open with ...\", choose Inkscape in the poped up list). Unclick \"Embed images\" and then \"OK\". In Inkscape, save it as SVG file. You can select the region of a diagram in PPT, Ctrl-C and Ctrl-V in Typora directly. Thus it will save a PNG file. In my experiment, this PNG is of 188KB. And with the above flow to save it as SVG file, its size is 62KB. And SVG can be zoomed in with very clear shape and font. Warning Please use normal fonts in PPT, for example \"Arial\". Otherwise you may get a SVG file with a replaced font and that may look different.","title":"Use diagrams from PPT"},{"location":"misc/doc-guide/#deploy-to-github-pages","text":"When most of the edition work is done, and it's time to commit your documents to oc-snap github. First you should commit and push your changes in web-doc , which is the folder of source files, to git repository. Commit web-doc source files in a branch other than master, ask someone to review them, merge them into master branch after getting approvements. Then you can simply publish website with just one step: cd <PATH>/oc-snap/web-doc mkdocs gh-deploy The entire website will be pushed to gh-pages branch of oc-snap repository. See them at https://pages.github.ibm.com/oc-enablement/oc-snap !","title":"Deploy to Github Pages"},{"location":"user-guide/co-simulation/","text":"Get started This is my start. I want it.","title":"Co-Simulation"},{"location":"user-guide/co-simulation/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/command-reference/","text":"Get started This is my start. I want it.","title":"Command Reference"},{"location":"user-guide/command-reference/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/debug-issue/","text":"Get started This is my start.","title":"Debug an issue"},{"location":"user-guide/debug-issue/#get-started","text":"This is my start.","title":"Get started"},{"location":"user-guide/deploy/","text":"Get started This is my start. I want it.","title":"Deploy on Power Server"},{"location":"user-guide/deploy/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/make-image/","text":"Get started This is my start. I want it.","title":"FPGA Image build"},{"location":"user-guide/make-image/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/new-action/","text":"Get started This is my start. I want it.","title":"Create a new action"},{"location":"user-guide/new-action/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/optimize-hls/","text":"Get started This is my start. I want it.","title":"Optimize HLS action"},{"location":"user-guide/optimize-hls/#get-started","text":"This is my start. I want it.","title":"Get started"},{"location":"user-guide/prepare-env/","text":"Prepare Environment Firstly, you need to have an x86 machine for developement. Check Tools Vivado xterm Simulators gcc Clone Repositories git clone git@github.ibm.com:OC-Enablement/oc-snap.git cd oc-snap git submodule init git submodule update Warning Please be aware of hardware/oc-bip. If you made changes in that submodule, please do remove the \"build\" directory manually. ( hardware/oc-bip/$CARD/oc-bsp/build ) Otherwise it will not be re-built automatically from the snap build scripts. git clone ocse!!!","title":"Prepare Environment"},{"location":"user-guide/prepare-env/#prepare-environment","text":"Firstly, you need to have an x86 machine for developement.","title":"Prepare Environment"},{"location":"user-guide/prepare-env/#check-tools","text":"","title":"Check Tools"},{"location":"user-guide/prepare-env/#vivado","text":"","title":"Vivado"},{"location":"user-guide/prepare-env/#xterm","text":"","title":"xterm"},{"location":"user-guide/prepare-env/#simulators","text":"","title":"Simulators"},{"location":"user-guide/prepare-env/#gcc","text":"","title":"gcc"},{"location":"user-guide/prepare-env/#clone-repositories","text":"git clone git@github.ibm.com:OC-Enablement/oc-snap.git cd oc-snap git submodule init git submodule update Warning Please be aware of hardware/oc-bip. If you made changes in that submodule, please do remove the \"build\" directory manually. ( hardware/oc-bip/$CARD/oc-bsp/build ) Otherwise it will not be re-built automatically from the snap build scripts. git clone ocse!!!","title":"Clone Repositories"},{"location":"user-guide/run-example/","text":"Get started This is my start. I want it.","title":"Run an example"},{"location":"user-guide/run-example/#get-started","text":"This is my start. I want it.","title":"Get started"}]}